name: SDD CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  sdd-validate:
    name: Validate SDD Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check SDD structure
        run: |
          echo "Checking SDD directory structure..."
          for dir in dev-docs/sdd dev-docs/agents dev-docs/git specs templates scripts; do
            if [ ! -d "$dir" ]; then
              echo "Error: Required directory $dir not found"
              exit 1
            fi
          done
          echo "‚úì Directory structure valid"

      - name: Check for unresolved clarifications
        run: |
          echo "Checking for [NEEDS CLARIFICATION] markers..."
          if grep -r "\[NEEDS CLARIFICATION" specs/ 2>/dev/null; then
            echo "Error: Unresolved clarification markers found"
            exit 1
          fi
          echo "‚úì No unresolved clarifications"

      - name: Validate commit messages
        if: github.event_name == 'pull_request'
        run: |
          echo "Validating commit messages for task references..."
          commits=$(git log --format="%s" origin/${{ github.base_ref }}..HEAD)
          pattern='^\(feat|fix|docs|style|refactor|test|chore\)(\([^)]+\))?: .+ \[TASK-[0-9]{3}\]$'
          
          while IFS= read -r commit; do
            if [[ ! "$commit" =~ $pattern ]] && [[ ! "$commit" =~ ^Merge ]]; then
              echo "Warning: Commit missing task reference: $commit"
            fi
          done <<< "$commits"
          echo "‚úì Commit message validation complete"

      - name: Check agent context files
        run: |
          echo "Checking agent context files..."
          for file in dev-docs/sdd/CLAUDE.md dev-docs/sdd/AGENTS.md; do
            if [ ! -f "$file" ]; then
              echo "Error: Required agent context file $file not found"
              exit 1
            fi
          done
          echo "‚úì Agent context files present"

      - name: Run Python validation script
        run: |
          if [ -f "scripts/sdd/validate_structure.py" ]; then
            python scripts/sdd/validate_structure.py
          else
            echo "Note: Python validation script not yet created"
          fi

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Create markdownlint config if missing
        run: |
          if [ ! -f ".markdownlint.json" ]; then
            echo '{
              "default": true,
              "MD013": false,
              "MD033": false,
              "MD041": false
            }' > .markdownlint.json
          fi

      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' --ignore node_modules --ignore venv || true
          echo "‚úì Documentation style check complete (non-blocking)"

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -e ".[dev]"

      - name: Run pytest
        run: |
          pytest tests/ -v --tb=short || echo "Tests executed (failures allowed during bootstrap)"

      - name: Check import
        run: |
          python -c "from specify_cli import app; print('‚úì CLI imports successfully')"

  linters:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Run black (check only)
        run: |
          black --check src/ tests/ --diff || echo "Note: Black formatting suggestions (non-blocking)"

      - name: Run ruff
        run: |
          ruff check src/ tests/ || echo "Note: Ruff suggestions (non-blocking)"

  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          echo "files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: AI Review Summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Placeholder for AI review integration
          # In production, this would call Claude Code GitHub Action
          # For now, post a summary comment
          
          cat << EOF > review_comment.md
          ## ü§ñ AI Review Summary
          
          **Changed Files:** ${{ steps.changed-files.outputs.files }}
          
          ### SDD Compliance Check
          - [ ] Specifications updated if needed
          - [ ] Task references in commits
          - [ ] Tests written/updated
          - [ ] Documentation current
          
          ### Suggestions
          - Review agent context files for completeness
          - Ensure git worktree documentation is followed
          - Validate against SDD constitution principles
          
          *Note: This is a placeholder. Full AI review integration pending.*
          EOF
          
          # Post comment to PR (requires GH CLI or API call)
          echo "AI review summary prepared (posting disabled in bootstrap)"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [sdd-validate, docs-style, tests, linters]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "## CI Summary"
          echo "- SDD Validation: ${{ needs.sdd-validate.result }}"
          echo "- Documentation Style: ${{ needs.docs-style.result }}"
          echo "- Tests: ${{ needs.tests.result }}"
          echo "- Linters: ${{ needs.linters.result }}"
          
          if [[ "${{ needs.sdd-validate.result }}" == "failure" ]]; then
            echo "‚ùå SDD validation failed - this is blocking"
            exit 1
          fi
          
          echo "‚úÖ CI checks complete"